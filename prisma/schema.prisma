generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
  Influencer
  Brand
}

enum IsAd {
  Ad
  AdFree
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?        @db.VarChar(255)
  image         String?
  role          Role?          @default(User)
  posts         Post[]
  comments      Comment[]
  cloths        Cloth[]
  subscriptions Subscription[] @relation("Subscriber")
  subscribedTo  Subscription[] @relation("SubscribedTo")

  //auth.js required*
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Subscription {
  id             Int    @id @default(autoincrement())
  subscriberId   String
  subscribedToId String

  subscriber   User @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscribedTo User @relation("SubscribedTo", fields: [subscribedToId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, subscribedToId])
}

model Post {
  id        Int       @id @default(autoincrement())
  commentid Int?
  title     String
  content   String
  userId    String
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images    Image[]
  Comment   Comment[]
}

model Comment {
  id      Int     @id @default(autoincrement())
  title   String
  content String
  postId  Int
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model Cloth {
  id     Int      @id @default(autoincrement())
  name   String
  isAd   IsAd
  Image  Image[]
  brands Brand[]  @relation("ClothBrands")
  outfit Outfit[]
  style  Style[]
  User   User?    @relation(fields: [userId], references: [id])
  userId String?
}

model Brand {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  cloths      Cloth[] @relation("ClothBrands")
  style       Style[]
}

model Outfit {
  id          Int     @id
  title       String
  description String
  image_id    Image?  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId     Int?
  cloths      Cloth[]
  style       Style[]
}

model Style {
  id     Int      @id
  name   String
  cloth  Cloth[]
  brand  Brand[]
  outfit Outfit[]
}

model Image {
  id       Int      @id @default(autoincrement())
  url      String?  @unique
  postId   Int?
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  cloth_id Cloth?   @relation(fields: [clothId], references: [id], onDelete: Cascade)
  clothId  Int?
  Outfit   Outfit[]
}
